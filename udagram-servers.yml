Description: >
  Kevin Edmond | Ur Avg Tech Company |
  This template deploys VPC resources. It deploys four EC2 web servers, 
  two in each private subnet across two Availabilty Zones. It deploys one 
  Bastion host server in the public subnet. It deploys three security groups 
  for the load balancer, web servers, and Bastion host. It deploys two 
  AutoScaling groups across two Availabilty Zones, one in the public subnet 
  for the Bastion host, and one in the privte subnet for web servers. It 
  deploys two launch configurations, one for each AutoScaling group. It 
  deploys an application load balancer mapped to the public subnets across two 
  Availabilty Zones. It deploys a Listener and Listener rule to forward traffic 
  to the web app target group. It deploys a target group that includes web 
  servers deployed in the private subnets.

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  VpcCIDR:
    Description: IP range for the Private VPN Network
    Type: String

  PublicInternetCIDR:
    Description: An environment name that will be prefixed to resource names
    Type: String

Resources:
  # Create Load Balancer Security Group
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref PublicInternetCIDR
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref VpcCIDR

  # Create Web Server Security Group
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from Bastion host only
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref PublicInternetCIDR
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref PublicInternetCIDR
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref PublicInternetCIDR

  # Create Bastion Host Security Group
  JumpServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH to our hosts and internal SSH traffic from our hosts
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref PublicInternetCIDR
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref VpcCIDR

  # Create Web Server Launch Configuration
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
      ImageId: ami-00ddb0e5626798373
      SecurityGroups:
        - Ref: WebServerSecGroup
      InstanceType: t3.medium
      IamInstanceProfile:
        Fn::ImportValue: !Sub "${EnvironmentName}-InstanceProfile-App"
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10"

  # Create Bastion Host Launch Configuration
  BastionLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          aws secretsmanager get-secret-value --secret-id server/webapp/sshkey --query SecretString --output text > /home/ec2-user/webapp-server
          chmod 600 webapp-server
          mv /home/ec2-user/webapp-server /home/ec2-user/webapp-server.pem
      ImageId: ami-04d29b6f966df1537
      KeyName: jump-server
      SecurityGroups:
        - Ref: JumpServerSecGroup
      InstanceType: t2.micro
      IamInstanceProfile:
        Fn::ImportValue: !Sub "${EnvironmentName}-InstanceProfile-Jump"
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "8"

  # Create Web Servers Auto Scale Group
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: "4"
      MaxSize: "4"
      TargetGroupARNs:
        - Ref: WebAppTargetGroup

  # Create Bastion Host Auto Scale Group
  BastionAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-NETS"
      LaunchConfigurationName:
        Ref: BastionLaunchConfig
      MinSize: "1"
      MaxSize: "1"

  # Create Application Load Balancer
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN-AZ1"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN-AZ2"
      SecurityGroups:
        - Ref: LBSecGroup

  # Create Load Balancer Listner
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: "80"
      Protocol: HTTP

  # Create Load Balancer Listner Rule
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "WebAppTargetGroup"
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref "Listener"
      Priority: 1

  # Create Web Servers Target Group
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

Outputs:
  LBWebAppDNSName:
    Description: Web Application Load Balancer DNS Address
    Value: !GetAtt WebAppLB.DNSName
    Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName]]
    Export:
      Name: !Sub ${EnvironmentName}-AppLB-DNS
